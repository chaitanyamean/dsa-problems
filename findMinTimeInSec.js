function minTimeInSeconds(arr) {
    let maxValue = Number.MIN_VALUE;
    let seconds = 0

    for(let i = 0; i< arr.length; i++) {
        if(arr[i] > maxValue) {
            maxValue = arr[i]
        } 
    }
    // console.log(maxValue);
    for(let i =0; i< arr.length; i++) {
        seconds = seconds + maxValue - arr[i]  
    }
    console.log(seconds);

}




// minTimeInSeconds([2,1,4,3,2])
// minTimeInSeconds([731, 349, 490, 781, 271, 405, 811, 181, 102, 126, 866, 16, 622, 492, 194, 735])




function findGoodPair(A, B){

    let count = 0;
    for(let i=0; i<A.length; i++) {
        for(j=i+1; j<A.length; j++) {
            if((A[i] + A[j]) === B) {
                count = count + 1
            }
        }
    }
    console.log(count);
}



// findGoodPair([193350, 373806, 183697, 813973, 840500, 242870, 516581, 97552, 523553, 734233, 212274, 160274, 272855, 371130, 558266, 323627, 501063, 595307, 816183, 47753, 803636, 856029, 349213, 908010, 164989, 480188, 632196, 934085, 965690, 578107, 90683, 159039, 951912, 790731, 973012, 308763, 33600, 489592, 406315, 73505, 223824, 134940, 233778, 13030, 22422, 308395, 853009, 523484, 903701, 669191, 571236, 223689, 525220, 920448, 131698, 206560, 916988, 763894, 140645, 882677, 858352, 747679, 41715, 326615, 54761, 14726, 151729, 88361, 20669, 74395, 678217, 760844, 209335, 911994, 290226, 
//     231756, 736741, 143234, 271591, 156793, 812424, 842827, 380481, 853995, 279626, 28531, 60555, 196613, 
//     792424, 717551, 595641, 167127, 465229, 637356, 493741, 519989, 168433, 645469, 124701, 705454], 719864)


//     findGoodPair([510827, 351151, 96897, 925335, 299818, 192489, 456948, 44720, 510589, 598577 ], 808099)
//     findGoodPair([1,2,3,4],7)

    function multipyPrevAndNext(A){
        let B = []
        let first = 0;
        let last = 0;
        for(let i=0;i<A.length;i++){
	        if(i === 0) {
	            B[i] = A[i] * A[i+1]
	        } else if(i === A.length -1) {
	            B[i] = A[i] * A[i-1]
	        } else {
                console.log(A[i], A[i-1])
	            B[i] = A[i-1] * A[i+1]
	        }
	    }
        console.log(B)
	    return A
    }

    // 2 3 8 15 20 
// 

    // multipyPrevAndNext([1,2,3,4,5])
    function addOneToArray(arr) {
        let idx = arr.length -1
        while(idx >= 0) {
            if(arr[idx] === 9) {
                arr[idx] = 0;
            } else {
                arr[idx] += 1
                console.log(arr);
                return arr
            }
            idx--
        }
        // let result = new Array(arr.length +1)
        // result[0] = 1;
        // console.log(result);
        // return result;
        arr.unshift(1)
        if(arr[0] === 0) {
            console.log('sss')
            arr.shift(1)
        }
        
        console.log(arr)
    }

    // addOneToArray([0, 3, 7, 6, 4, 0, 5, 5, 5])

    // run while loop
    // see if idx is 9 if it is 9 the n add 1 to that index
    // if it is not === to 9 then add 1 to that digit and return


    function maxSubSequenceNumbers(arr) {
        console.log(arr)
        // first element need to find if it is even or odd
        let prev;
        let current;
        let finalArr = [];
        if(arr[0] % 2 == 0) {
            prev = 1
        } else {
            prev = 0
        }
        finalArr.push(arr[0])
        // run the for loop from index 1 and check the next element is odd/even
        for(i=1; i<arr.length; i++) {
            if(arr[i] % 2 == 0) {
                current = 1
            } else {
                current = 0
            }
            if(prev == 0 && current == 1) {
                finalArr.push(arr[i])
                prev = current
            } 

            if(prev == 1 && current == 0) {
                finalArr.push(arr[i])
                prev = current
            }
        }

        console.log(finalArr);

    }

    // maxSubSequenceNumbers([12, 10, 28, 37, 43, 40, 14, 12, 48])


    function primalNumber(arr){
        console.log(arr.length);
        let count = 0;
        let negArr = []
        for(let i=0; i<=arr.length; i++) {
            if(arr[i] > 1) {
                negArr.push(arr[i])
            //   if(arr [i] % 2 !== 0) {
                // let isPrime = true;
                //   for(let j =2; j<arr[i]; j++) {
                //     if(arr[i] % j === 0) {
                //         isPrime = false;
                //         break;
                //     } else {
                //     }
                //   }
                //   if(isPrime) {
                //       count++
                //   }
            //   }
            }
        }
        console.log(negArr)
        // console.log('ss',count)
    }
// primalNumber([821, 977, 863, 881, 839, 947, 991, -840, 863, -29, 877, 971, 977, 0, 1, -300, 2, -301, 853, 967, -126, 179, 863, 953, 853, 967, 929, 811, 883, 857, 863, -478, 883, 971, 853, 971, 991, 877, 937, 827, -69, 778, 997, 863, 937, 971, 821, 839, 827, 941, 947, 827, 953, -395, 515, 953, 863, 857, -878, 977, 991, 883, 937, 823, 821, 887, 853, 857, 929, 113, 907, 977, 877, 947, 721, 947, 911, 971, 991, 977, 937, 877, 883, 839, 827, 907, 919, 967, 853, 823, -675, 821, 971, 827, 187, 953, 979, 991, 887, 853, 907, 919, 887, 929, 911, 953, 863, 971, 887, 967, 881, 967, 929, 947, 827, 881, -406, 911, 827, 947, 877, 823, 977, 823, 827, 977, 881, 977, -688, 983, 823, 524, 919, 977, 857, 829, 967, 991, 829, 971, -218, 937, 953, -877, 881, 823, 839, 811, 853, 997, 857, 907, 971, -624, 947, 977, 971, 881, 827, -783, 911, 971, 883, 859, 877, -321, 863, 839, 919, 821, 857, 859, -16, 821, 859, 883, -900, 827, 839, 991, 829, 911, -714, 947, 829, 839, -843, 811, 877, 962, 887, -107, 839, 763, 983, 919, 983, 515, 709, 967, 821, 853, 937, 907, 839, 907, 883, 977, 857, 887, 991, 847, 829, 427, 857, 971, 857, -963, 991, 937, -461, 919, 881, 991, 953, 551, 967, 953, 884, 811, 883, 398, 823, -328, 378, 877, -727, 536, 991, 823, 997, 823, 857, -814, -6, 919, 887, 883, 983, 948, -954, 853, 954, 823, 823, 881, 941, 863, 947, 971, 853, 44, 821, 435, 887, 372, 947, 863, 991, 967, 887, -521, -1, 877, 983, 977, -721, 919, 857, 827, 991, 953, 937, 827, 971, 859, 953, 629, 983, 883, 821, 811, 827, 911, 919, 60, 971, 346, 971, 937, 574, 827, 929, 155, 859, 983, 811, 827, 977, 811, 997, 823, 578, 526, 967, 111, 991, 719, -553, 883, 947, 911, 989, 821, 877, 279, 907, 877, 887, 158, 859, 997, 911, 947, 887, 827, -756, 907, -550, 911, 971, 873, 953, 127, 887, 929, 859, 971, 977, 839, -633, 929, 983, 827, 983, 919, 839, 929, 997, 249, -68, 811, 971, 883, 829, 853, 997, 907, 883, 853, 853, 863, 881, 906, 827, 859, 883, 595, 859, 827, 947, 863, 907, 307, 853, 881, 821, 829, 907, 937, 919, 977, 967, 829, 710, 398, 937, 911, 877, -77, 839, 971, 953, 784, 857, 829, 23, 28, 400, 919, 839, -750, 883, 929, 929, 878, 919, 937, 977, 859, 150, 971, 977, 887, -626, 827, 11, 821, 887, 811, 883, 911, 17, 937, 991, 967, 823, 881, 983, 929, 983, -151, 128, -288, 947, 881, -241, 839, -270, 859, 887, 937, 857, 907, 881, 811, 941, 971, 907, -89, 941, 907, 941, 877, 919, 941, 929, 853, -454, 983, 829, 857, -845, 859, -561, 821, 372, 644, 582, 856, 829, 953, 857, 877, 941, 829, 941, 991, 393, 839, 839, 911, 857, 887, -86, 887, 618, 977, 863, 967, 907, 823, 929, 821, 823, 863, 983, 971, 839, 953, 941, 977, 953, 937, 853, 919, 579, 811, -583, 991, 412, 977, 991, 919, 887, -667, 839, -367, 863, 983, 971, 971, 471, 887, 821, 911, -711, 827, -887, -314, 971, 983, 991, 911, 863, 919, 18, 737, 941, -655, -951, 997, 941, 911, 991, 941, 947, 859, 857, 887, 829, 877, 947, 857, 823, 919, 877, 881, 883, 827, 887, 941, 947, -39, 853, 853, 853, 887, 668, 823, 941, 823, 953, 139, 382, -105, 106, 823, -65, 366, -118, 971, 18, 351, 911, 947, 929, 877, 983, -539, 983, -233, 997, 863, 919, 857, 829, 937, 947, 883, 967, 967, 947, 823, 977, -695, 953, 857, 882, 967, 656, 853, 194, 853, 937, 829, 857, -162, 863, 953, 887, 859, 941, 823, 983, 983, 841, 863, 947, -650, 827, 853, 971, 937, 911, 853, 911, 2, 919, 130, 829, 907, 883, 907, 929, 991, 971, 953, -180, 947, 937, 991, 941, 929, 991, 821, 839, 859, 881, 827, 853, 823, -733, 881, 877, 823, 883, 997, 823, -803, 863, 907, 821, 853, 983, 829, -719, 863, 192, 940, 685, 863, 821, 631, 827, 877, 823, 883, -799, -946, 863, 49, 991, 580, 907, 821, 860, 823, 839, -686, -133, -329, 811, 947, 722, 827, 919, 883, 829, 953, 827, 528, 997, 881, -765, 953, 967, 887, 863, 827, 953, 937, 953, 877, 839, 863, 887, 953, -83, 947, 953, 883, -480, 829, 983, 971, 991, 907, 823, 829, 977, 881, 997, -8, 863, 911, 536, 827, 929, 983, 907, 859, 919, 736, 827, 991, 853, 821, 811, -173, -476, 827, 821, 911, 859, 883, 977, 953, 983, -807, 823, 859, 971, 472, 829, 953, 839, 394, 929, 983, 857, 911, 877, 839, 907, 929, 947, 941, 941, 877, 983, 983, 877, 811, 911, 477, 857, 941, 839, 386, 857, 941, -305, 877, 857, 857, 997, 414, 903, 425, 983, 811, 877, 857, 823, 977, 971, 859, -685, 919, 911, 811, 863, 877, 114, 997, 947, 947, 811, 967, -464, -316, 857, 827, 883, 908, 887, 901, 821, 887, 863, 883, 911, 881, 821, 823, 863, 937, 946, 782, 953, 919, -677, 929, 823, 971, 555, 937, 859, 131, 929, 991, 664, 983, 911, 877, 977, 859, 859, 827, -526, 887, 829, 911, 827, 911, 997, 839, 823, 967, 997, 983, 727, 929, -517, 883, -695, 997, 881, 977, 953, 811, 777, 947, 919, 863, 811, 941, 811, 829, 929, 937, 857, 829, 919, 977, 557, 331, 941, 937, 887, 857, 877, 919, 953, 983, 863, 877, 877, -904, 997, 821, 967, 881, 829, 991, 811, 997, 991, 863, 386, 947, 887, 863, 977, 881, 947, 887, 859, 887, -606, 967, 277, 576, 295, -814, 859, 929, 839, 947, 953, 977, 829, 823, 953, 911, 997, 881, 853, 857, 883, 929, 857, 991, 997, 977, 937, 911, 811, -623, 971, 929, 883, 983, 815, 941, 857, 983, 983, 971, 208, 811, -340, -114, 983, 881, 827, 695, 857, 967])


function rotateRight(arr) {
    console.log(arr);
    for(let i = 0; i< arr.length / 2; i++) {
        for(let j = i; j< arr.length - i -1; i++) {
            let temp = arr[i][j]
            arr[i][j] = arr[arr.length - i - 1][j]
            arr[arr.length - i - 1][i] = arr[arr.length - i - 1][arr.length - j -1]
            arr[arr.length - i - 1][arr.length - j -1] = arr[i][arr.length-j-1]
            arr[i][arr.length-j-1] = temp;
        }

    }

    console.log(arr)
}

// rotateRight([
//   [1, 2, 3],
//   [4, 5, 6],
//   [7, 8, 9],
// ])




function maxOneInARow(A){
    console.log(A)
    let rowNumber;
    let count = Number.MIN_VALUE;

    for(let i = 0; i < A.length; i++) {
        let addOne = 0;
        for(j=0; j<A.length ; j++) {
            if(A[i][j] === 1) {
                addOne++;
            }
        }
        if(addOne > count) {
            count = addOne
            rowNumber = i
        }
    }
console.log(rowNumber)
}

// maxOneInARow([   [0, 1, 1],
//     [0, 0, 1],
//     [0, 1, 1]   ])



    function diagnoalMatrix(A){
        console.log(A)
        let n = A.length;
        let N = 2 * n - 1;
        console.log(n, N);
        let result = []
        for(let i = 0; i<N; i++){
            result.push([])
        }

        console.log('RED', result);

        for(let i=0;i<n;i++){
            for(let j=0;j<n;j++){
                result[i+j].push(A[i][j])
            }
        }

        for(let i = 0; i<=n/2;i++){
            for(let j = i+1; j<n; j++){
                result[i].push(0)
            }
        }

        // for(let i = n; i<=n; i){
        //     // for(let j= )
        // }
        console.log(result)
    }



    let A = [[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12],
              [13, 14, 15, 16]];

              let B = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]]
    diagnoalMatrix(B)